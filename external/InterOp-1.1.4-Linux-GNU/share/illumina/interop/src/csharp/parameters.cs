//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Illumina.InterOp.Run {

public class parameters : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal parameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(parameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~parameters() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          c_csharp_runPINVOKE.delete_parameters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public parameters(uint version, instrument_type instrument_type) : this(c_csharp_runPINVOKE.new_parameters__SWIG_0(version, (int)instrument_type), true) {
  }

  public parameters(uint version) : this(c_csharp_runPINVOKE.new_parameters__SWIG_1(version), true) {
  }

  public parameters() : this(c_csharp_runPINVOKE.new_parameters__SWIG_2(), true) {
  }

  public instrument_type instrument_type() {
    instrument_type ret = (instrument_type)c_csharp_runPINVOKE.parameters_instrument_type(swigCPtr);
    return ret;
  }

  public uint version() {
    uint ret = c_csharp_runPINVOKE.parameters_version(swigCPtr);
    return ret;
  }

  public void read(string run_folder) {
    c_csharp_runPINVOKE.parameters_read(swigCPtr, run_folder);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void read_file(string filename) {
    c_csharp_runPINVOKE.parameters_read_file(swigCPtr, filename);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

  public void parse(string data) {
    c_csharp_runPINVOKE.parameters_parse(swigCPtr, data);
    if (c_csharp_runPINVOKE.SWIGPendingException.Pending) throw c_csharp_runPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
