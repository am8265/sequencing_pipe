from CHGV_mysql import getTestSequenceDB,getSequenceDB,MachineCheck
import logging
import os
import sys

def main():
    pwd = os.getcwd()
    sequenceDB = getSequenceDB()

    if len(sys.argv) == 1:

        info = pwd.split('/')[4].split('_')
        Date = info[0]
        FCID = info[3]
        Machine = MachineCheck(sequenceDB,info[1],FCID)
    else:
        Date = sys.argv[1]
        Machine = sys.argv[2]
        FCID = sys.argv[3]

    create_sss_bcl_ver2(pwd,FCID,Machine,Date,sequenceDB)

def getReadsRecipe(FCID,sequenceDB):
    query = "SELECT LenR1,LenI1,LenI2,LenR2 FROM Flowcell WHERE FCILLUMID = '{}'".format(FCID)
    sequenceDB.execute(query)
    recipe = sequenceDB.fetchone()
    return recipe

def getLaneNum(FCID):

    lane_num = 8
    if FCID[0] == 'H':
        lane_num = 2
    """
    #placeholder for NovaSeq Flowcells
    elif FCID[0] == 'N1-2':
        lane_num = 2
    elif FCID[0] == 'N3-4':
        lane_num = 4
    """
    return lane_num

def getAllProjects(FCID,sequenceDB):
    query = ("SELECT distinct(s.GAFBIN) "\
            "FROM SampleT s " \
            "JOIN Lane l ON s.DBID=l.DBID "\
            "JOIN Flowcell f ON f.FCID=l.FCID "\
            "WHERE FCILLUMID='{}'".format(FCID))

    sequenceDB.execute(query)
    allProjects = sequenceDB.fetchall()[0]
    allProjects = '/'.join(allProjects)
    return allProjects

def getFlowcellUser(FCID,sequenceDB):
    query = ("SELECT REPLACE(name,' ','') "
            "FROM Flowcell f JOIN users u ON f.userid=u.userid "
            "WHERE FCillumID='{}'".format(FCID))
    sequenceDB.execute(query)
    flowcellUser = sequenceDB.fetchone()[0]
    return flowcellUser

def create_sss_bcl_2(runPath,FCID,Machine,date,config,database):
    """Newer version of bcl2fastq v2 require a new sample sheet format
    what was generated by the Illumina Experiment Manager"""
    logger = logging.getLogger('create_sss_bcl_2')
    sample_sheet = []
    outfile=open('%s/%s_%s_%s.csv' % (runPath,Machine,date,FCID),'w')
    recipe = getReadsRecipe(FCID,sequenceDB)
    allProjects = getAllProjects(FCID,sequenceDB)
    lane_num = getLaneNum(FCID)
    flowcellUser = getFlowcellUser(FCID,sequenceDB)

    #Sample Sheet Header
    outfile.write("[Header]\n")
    outfile.write("IEMFileVersion,4\n")
    outfile.write("Investigator Name,{}\n".format(flowcellUser))
    outfile.write("Experiment Name,{}\n".format(FCID))
    outfile.write("Date,{}\n".format(date))
    outfile.write("Workflow,GenerateFASTQ\n")
    outfile.write("Application,HiSeq FASTQ Only\n")
    outfile.write("Assay,TruSeq HT\n")
    outfile.write("Description,{}\n".format(allProjects))
    outfile.write("Chemistry,Default\n")
    outfile.write("\n")
    outfile.write("[Reads]\n")
    outfile.write("{}\n".format(str(recipe[0])))
    outfile.write("{}\n".format(str(recipe[-1])))
    outfile.write("\n")
    outfile.write("[Data]\n")
    outfile.write("\n")

    outfile.write("Lane,Sample_ID,Sample_Name,Sample_Plate,Sample_Well,I7_Index_ID,index,Sample_Project,Description\n")

    for LaneNum in range(1,lane_num+1):
        sql = ("SELECT DBID "
            "FROM Lane l "
            "JOIN Flowcell f "
            "ON l.FCID=f.FCID "
            "WHERE FCillumID='{0}' AND f.Machine='{1}' AND l.laneNum='{2}' "
            "ORDER BY LaneNum").format(FCID,Machine,LaneNum)

        sequenceDB.execute(sql)
        ss_samples = sequenceDB.fetchall()
        if len(ss_samples) == 0:
            #print FCID,Machine,LaneNum
            raise Exception, "No Samples were found with FCillumID: %s" % FCID
        #print ss_samples
        for DBID in ss_samples:
            DBID = str(DBID[0])
            if Machine[0] == 'H': #HiSeqs
                laneFraction = getSSSLaneFractionHS(DBID,FCID,LaneNum,database)
            elif Machine[0] == 'A': #NovaSeqs' Illumina name.  != Flowcell.Machine values
                laneFraction = getSSSLaneFractionNS(DBID,FCID,LaneNum,database)
            else:
                raise ValueError, "Unknown Machine type: {}!".format(Machine)

            # empty strings are for 'Sample_Plate,Sample_Well,I7_Index_ID'
            # Description contains expected lane fraction, picomolar amount, flowcell user
            sql = "SELECT l.LaneNum Lane,\
                pt.CHGVID SampleID,\
                pt.CHGVID SampleID,\
                '',\
                '',\
                '',\
                (case \
                    WHEN f.recipe=2 THEN '' \
                    WHEN st.SeqType='Exome' THEN pm.adapterlet \
                    WHEN st.Seqtype='RNAseq' THEN s2r.adapterlet \
                    WHEN st.Seqtype='Genome' THEN s2r.adapterlet \
                    WHEN st.SeqType='Custom Capture' THEN pm.adapterlet \
                END) 'Index',\
                replace(s.GAFbin,' ','') Project, \
                CONCAT(round('{0}',4),'_',round(s2r.picomoles,1),'pM') Description \
                FROM Lane l \
                    JOIN Flowcell f ON f.FCID=l.FCID \
                    JOIN prepT pt ON l.prepID=pt.prepID \
                    JOIN samplesTOrun s2r ON s2r.seqID=l.seqID \
                    JOIN SeqType st ON l.prepID=st.prepID \
                    JOIN SampleT s ON s.DBID=pt.DBID \
                    LEFT JOIN poolMembers pm ON \
                        (pm.DBID=pt.DBID AND pm.poolID=l.poolID) \
                WHERE \
                    l.dbid='{1}' AND \
                    f.FCillumID='{2}' AND \
                    LaneNum='{3}'".format(laneFraction,DBID,FCID,LaneNum)
            #print sql

            logger.info(sql)
            sequenceDB.execute(sql)

            ss_line = sequenceDB.fetchone()

            sample_sheet.append(ss_line)
            #print ss_line,DBID,FCID,LaneNum
            outfile.write(",".join(map(str,ss_line))+'\n')
    outfile.close()
    #copies sequencing sample sheet to genotyping location
    os.system('cp %s/%s_%s_%s.csv /nfs/igmdata01/Sequencing_SampleSheets/' % (runPath,Machine,date,FCID))
    logger.info('cp %s/%s_%s_%s.csv /nfs/igmdata01/Sequencing_SampleSheets/' % (runPath,Machine,date,FCID))

if __name__ == '__main__':
    main()
