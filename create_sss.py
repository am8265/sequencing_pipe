from CHGV_mysql import getSequenceDB,MachineCheck
import logging
import os
import sys

def main():
    pwd = os.getcwd()
    sequenceDB = getSequenceDB()

    if len(sys.argv) == 1:

        info = pwd.split('/')[4].split('_')
        Date = info[0]
        FCID = info[3]
        Machine = MachineCheck(sequenceDB,info[1],FCID)
    else:
        Date = sys.argv[1]
        Machine = sys.argv[2]
        FCID = sys.argv[3]

    create_sss_bcl_2_18(pwd,FCID,Machine,Date,sequenceDB)

def getReadsRecipe(FCID,sequenceDB):
    query = "SELECT recipe FROM Flowcell WHERE FCILLUMID = '{}'".format(FCID)
    sequenceDB.execute(query)
    encoded_recipe = sequenceDB.fetchone()[0]

    if encoded_recipe == '1':
        recipe = [101,7,101]
    elif encoded_recipe == '2':
        recipe = [101,101]
    elif encoded_recipe == '3':
        recipe = [101,7,7,101]
    elif encoded_recipe == '4':
        recipe = [100,9,100]
    elif encoded_recipe == '5':
        recipe = [126,7,126]
    elif encoded_recipe == '6':
        recipe = [101,8,101]
    elif encoded_recipe == '7':
        recipe = [151,7,151]
    elif encoded_recipe == '8':
        recipe = [251,7,251]
    elif encoded_recipe == '9':
        recipe = [151,7,7,151]
    else:
        raise Exception, "Unhandled recipe code: {}!".format(encoded_recipe)
    return recipe

def getLaneNum(FCID):

    lane_num = 8
    if FCID[0] == 'H':
        lane_num = 2
    """
    #placeholder for NovaSeq Flowcells
    elif FCID[0] == 'N1-2':
        lane_num = 2
    elif FCID[0] == 'N3-4':
        lane_num = 4
    """
    return lane_num

def getAllProjects(FCID,sequenceDB):
    query = ("SELECT distinct(s.GAFBIN) "\
            "FROM SampleT s " \
            "JOIN Lane l ON s.DBID=l.DBID "\
            "JOIN Flowcell f ON f.FCID=l.FCID "\
            "WHERE FCILLUMID='{}'".format(FCID))

    sequenceDB.execute(query)
    allProjects = sequenceDB.fetchall()[0]
    allProjects = '/'.join(allProjects)
    return allProjects

def getFlowcellUser(FCID,sequenceDB):
    query = ("SELECT REPLACE(name,' ','') "
            "FROM Flowcell f JOIN users u ON f.userid=u.userid "
            "WHERE FCillumID='{}'".format(FCID))
    sequenceDB.execute(query)
    flowcellUser = sequenceDB.fetchone()[0]
    return flowcellUser

def create_sss_bcl_2_18(runPath,FCID,Machine,date,sequenceDB):
    """Newer version of bcl2fastq2.18 require a new sample sheet format
    what was generated by the Illumina Experiment Manager"""
    logger = logging.getLogger('create_sss_bcl_2_18')
    sample_sheet = []
    outfile=open('%s/%s_%s_%s.csv' % (runPath,Machine,date,FCID),'w')
    recipe = getReadsRecipe(FCID,sequenceDB)
    allProjects = getAllProjects(FCID,sequenceDB)
    lane_num = getLaneNum(FCID)
    flowcellUser = getFlowcellUser(FCID,sequenceDB)

    #Sample Sheet Header
    outfile.write("[Header]\n")
    outfile.write("IEMFileVersion,4\n")
    outfile.write("Investigator Name,{}\n".format(flowcellUser))
    outfile.write("Experiment Name,{}\n".format(FCID))
    outfile.write("Date,{}\n".format(date))
    outfile.write("Workflow,GenerateFASTQ\n")
    outfile.write("Application,HiSeq FASTQ Only\n")
    outfile.write("Assay,TruSeq HT\n")
    outfile.write("Description,{}\n".format(allProjects))
    outfile.write("Chemistry,Default\n")
    outfile.write("\n")
    outfile.write("[Reads]\n")
    outfile.write("{}\n".format(recipe[0]))
    outfile.write("{}\n".format(recipe[-1]))
    outfile.write("\n")
    outfile.write("[Data]\n")
    outfile.write("\n")

    outfile.write("Lane,Sample_ID,Sample_Name,Sample_Plate,Sample_Well,I7_Index_ID,index,Sample_Project,Description\n")

    for LaneNum in range(1,lane_num+1):
        sql = ("SELECT DBID "
            "FROM Lane l "
            "JOIN Flowcell f "
            "ON l.FCID=f.FCID "
            "WHERE FCillumID='{0}' AND f.Machine='{1}' AND l.laneNum='{2}' "
            "ORDER BY LaneNum").format(FCID,Machine,LaneNum)

        sequenceDB.execute(sql)
        ss_samples = sequenceDB.fetchall()
        if len(ss_samples) == 0:
            #print FCID,Machine,LaneNum
            raise Exception, "No Samples were found with FCillumID: %s" % FCID
        #print ss_samples
        for DBID in ss_samples:
            DBID = str(DBID[0])
            laneFraction = getSSSLaneFraction(DBID,FCID,LaneNum,sequenceDB)

            # empty strings are for 'Sample_Plate,Sample_Well,I7_Index_ID'
            # Description contains expected lane fraction, picomolar amount, flowcell user
            sql = "SELECT l.LaneNum Lane,\
                pt.CHGVID SampleID,\
                pt.prepID SampleID,\
                '',\
                '',\
                '',\
                (case \
                    WHEN f.recipe=2 THEN '' \
                    WHEN st.SeqType='Exome' THEN pm.adapterlet \
                    WHEN st.Seqtype='RNAseq' THEN s2r.adapterlet \
                    WHEN st.Seqtype='Genome' THEN s2r.adapterlet \
                    WHEN st.SeqType='Custom Capture' THEN pm.adapterlet \
                END) 'Index',\
                replace(s.GAFbin,' ','') Project, \
                CONCAT(round('{0}',4),'_',round(s2r.picomoles,1),'pM') Description \
                FROM Lane l \
                    JOIN Flowcell f ON f.FCID=l.FCID \
                    JOIN prepT pt ON l.prepID=pt.prepID \
                    JOIN samplesTOrun s2r ON s2r.seqID=l.seqID \
                    JOIN SeqType st ON l.prepID=st.prepID \
                    JOIN SampleT s ON s.DBID=pt.DBID \
                    LEFT JOIN poolMembers pm ON \
                        (pm.DBID=pt.DBID AND pm.poolID=l.poolID) \
                WHERE \
                    l.dbid='{1}' AND \
                    f.FCillumID='{2}' AND \
                    LaneNum='{3}'".format(laneFraction,DBID,FCID,LaneNum)
            #print sql

            logger.info(sql)
            sequenceDB.execute(sql)

            ss_line = sequenceDB.fetchone()

            sample_sheet.append(ss_line)
            #print ss_line,DBID,FCID,LaneNum
            outfile.write(",".join(map(str,ss_line))+'\n')
    outfile.close()
    #copies sequencing sample sheet to genotyping location
    os.system('cp %s/%s_%s_%s.csv /nfs/fastq16/Sequencing_SampleSheets/' % (runPath,Machine,date,FCID))
    logger.info('cp %s/%s_%s_%s.csv /nfs/fastq16/Sequencing_SampleSheets/' % (runPath,Machine,date,FCID))

def getSSSLaneFraction(DBID,FCID,LaneNum,sequenceDB):

    #get seqtype
    sql = ("SELECT SeqType FROM Lane l "
        "JOIN SeqType st ON st.prepID=l.prepID "
        "JOIN Flowcell f on l.FCID=f.FCID "
        "WHERE l.DBID={0} AND LaneNum={1} AND FCillumID='{2}'"
        ).format(DBID,LaneNum,FCID)
    sequenceDB.execute(sql)
    seqtype = sequenceDB.fetchone()[0]

    #get the laneFraction from samplesToRun
    sql = ("SELECT laneFraction FROM Lane l "
        "JOIN Flowcell f ON f.FCID=l.FCID "
        "JOIN samplesTOrun s2r ON l.seqID = s2r.seqID "
        "WHERE l.DBID={0} AND FCIllumID='{1}' AND laneNum={2}"
        ).format(DBID,FCID,LaneNum)
    sequenceDB.execute(sql)
    laneFraction = sequenceDB.fetchone()[0]
    #print DBID,FCID,LaneNum
    if float(laneFraction) == 0:
        raise Exception, ("Missing laneFraction values from samplesToRun for "
            "DBID: {0} on Lane: {1} ").format(DBID,LaneNum)

    #get the number of pools in a lane
    sql = ("SELECT COUNT(DISTINCT(PoolID)) FROM Lane l "
        "JOIN Flowcell f ON f.FCID=l.FCID "
        "WHERE FCIllumID='{0}' AND laneNum={1} AND poolID!=0"
        ).format(FCID,LaneNum)
    sequenceDB.execute(sql)
    numPools = sequenceDB.fetchone()[0]

    #get any other samples that might be on a lane ex. genome/RNAseq
    sql = ("SELECT COUNT(PoolID) FROM Lane l "
        "JOIN Flowcell f ON f.FCID=l.FCID "
        "WHERE FCIllumID='{0}' AND laneNum={1} AND poolID=0"
        ).format(FCID,LaneNum)
    sequenceDB.execute(sql)
    NumOtherSamples = sequenceDB.fetchone()[0]

    #get the number of times a samples is on a flowcell.  Used for genomes and
    #RNASeq
    sql = ("SELECT COUNT(*) FROM Lane l "
        "JOIN Flowcell f ON l.FCID=f.FCID "
        "WHERE l.prepID="
            "(SELECT prepID FROM Lane l "
            "JOIN Flowcell f ON l.FCID=f.FCID "
            "WHERE l.LaneNum={0} AND f.FCillumID='{1}' AND DBID={2}) "
        "AND FCillumID='{3}'"
        ).format(LaneNum,FCID,DBID,FCID)
    sequenceDB.execute(sql)
    NumLanesSampleOn = sequenceDB.fetchone()[0]

    #get number of samples in a pool
    if numPools > 0:
        sql =("SELECT "
            "(CASE "
                "WHEN l.poolID=0 THEN 1 "
                "WHEN l.poolID!=0 THEN "
                    "(SELECT COUNT(DISTINCT pM.prepID) FROM poolMembers pM "
                    "WHERE pM.poolid="
                        "(SELECT DISTINCT l.poolID FROM Lane l "
                        "JOIN Flowcell f ON f.FCID=l.FCID "
                        "WHERE l.DBID={0} AND FCillumID='{1}' AND LaneNum={2})) "
            "END) "
            "FROM Lane l "
            "JOIN Flowcell f ON f.FCID=l.FCID "
            "WHERE l.DBID={3} AND FCIllumid='{4}' AND LaneNum={5}"
            ).format(DBID,FCID,LaneNum,DBID,FCID,LaneNum)
        sequenceDB.execute(sql)
        NumPoolSamples = sequenceDB.fetchone()[0]
    else:
        #numPools = 0
        NumPoolSamples = 1

    #print "LaneNum,DBID,seqtype,float(laneFraction),numPools,NumOtherSamples,NumLanesSampleOn,NumPoolSamples"
    #print LaneNum,DBID,seqtype,float(laneFraction),numPools,NumOtherSamples,NumLanesSampleOn,NumPoolSamples

    if seqtype == 'Genome':
        #SampleLaneFraction = float(laneFraction)/(numPools+1)/NumPoolSamples/NumLanesSampleOn
        SampleLaneFraction = float(1)/(numPools + NumOtherSamples)
        #print SampleLaneFraction,numPools,NumOtherSamples
        #SampleLaneFraction = float(laneFraction)
    elif seqtype == 'RNAseq':
        #SampleLaneFraction = float(laneFraction)/(numPools+1)/NumPoolSamples/NumLanesSampleOn
        SampleLaneFraction = float(1)/(numPools + NumOtherSamples)
        #SampleLaneFraction = float(laneFraction/NumPoolSamples)
    elif seqtype == 'Exome':
        #SampleLaneFraction = float(laneFraction)/NumPoolSamples/(NumOtherSamples+1)
        SampleLaneFraction = float(laneFraction/NumPoolSamples)
    elif seqtype == 'Custom Capture':
        #SampleLaneFraction = float(laneFraction)/NumPoolSamples/(NumOtherSamples+1)
        SampleLaneFraction = float(laneFraction/NumPoolSamples)

    return SampleLaneFraction

if __name__ == '__main__':
    main()
